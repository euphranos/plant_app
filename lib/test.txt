import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: ContainerAnimation(),
      ),
    );
  }
}

class ContainerAnimation extends StatefulWidget {
  @override
  _ContainerAnimationState createState() => _ContainerAnimationState();
}

class _ContainerAnimationState extends State<ContainerAnimation>
    with SingleTickerProviderStateMixin {
  List<Widget> movingContainers = [];
  GlobalKey redContainerKey = GlobalKey();
  GlobalKey blueContainerKey = GlobalKey();

  void addMovingContainer() {
    RenderBox redBox =
        redContainerKey.currentContext!.findRenderObject() as RenderBox;
    Offset redPosition = redBox.localToGlobal(Offset.zero);

    RenderBox blueBox =
        blueContainerKey.currentContext!.findRenderObject() as RenderBox;
    Offset bluePosition = blueBox.localToGlobal(Offset.zero);

    setState(() {
      movingContainers.add(PositionedTransitionContainer(
        start: redPosition,
        end: bluePosition,
      ));
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Positioned(
          left: 0,
          bottom: 0,
          right: 0,
          child: GestureDetector(
            key: redContainerKey,
            onTap: addMovingContainer,
            child: Container(
              height: 100,
              color: Colors.red,
              child: Center(
                child: Text(
                  "Click me",
                  style: TextStyle(color: Colors.white, fontSize: 18),
                ),
              ),
            ),
          ),
        ),
        Positioned(
          top: 50,
          right: 20,
          child: Container(
            key: blueContainerKey,
            width: 100,
            height: 100,
            color: Colors.blue,
          ),
        ),
        ...movingContainers,
      ],
    );
  }
}

class PositionedTransitionContainer extends StatefulWidget {
  final Offset start;
  final Offset end;

  PositionedTransitionContainer({required this.start, required this.end});

  @override
  _PositionedTransitionContainerState createState() =>
      _PositionedTransitionContainerState();
}

class _PositionedTransitionContainerState
    extends State<PositionedTransitionContainer>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: Duration(seconds: 2),
      vsync: this,
    );

    _animation = Tween<Offset>(begin: widget.start, end: widget.end).animate(
      CurvedAnimation(
        parent: _controller,
        curve: Curves.easeInOut,
      ),
    );

    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        return Positioned(
          left: _animation.value.dx,
          top: _animation.value.dy,
          child: Container(
            width: 20,
            height: 20,
            color: Colors.green,
          ),
        );
      },
    );
  }
}
